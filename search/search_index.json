{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00b6 Detect non-inclusive language in your source code. About \u00b6 Creating an inclusive work environment is imperative to a healthy, supportive, and productive culture, and an environment where everyone feels welcome and included. woke is a text file analysis tool that finds places within your source code that contain non-inclusive language and suggests replacing them with more inclusive alternatives. Companies like GitHub , Twitter , and Apple are actively supporting a move to inclusive language. Demo \u00b6 Why is this named woke ? \u00b6 When I started writing woke in August 2020, my goal was to build a tool that would shed light on non-inclusive language in source code and that would enable a long-term commitment to using inclusive language. woke is a reference to an awareness of social and political issues, especially racial prejudice and discrimination, and has a historic use within the African-American community. This tool aims to push this kind of awareness even further into the software development community. I named this project woke because I saw it as a tool to awaken our code to non-inclusive language. You can read more about the origins and history of the word on Wikipedia . Authors \u00b6 Caitlin Elfring - caitlinelfring See also the list of contributors who participated in this project. Contributing \u00b6 Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. License \u00b6 This application is licensed under the MIT License, you may obtain a copy of it here .","title":"Introduction"},{"location":"#_1","text":"Detect non-inclusive language in your source code.","title":""},{"location":"#about","text":"Creating an inclusive work environment is imperative to a healthy, supportive, and productive culture, and an environment where everyone feels welcome and included. woke is a text file analysis tool that finds places within your source code that contain non-inclusive language and suggests replacing them with more inclusive alternatives. Companies like GitHub , Twitter , and Apple are actively supporting a move to inclusive language.","title":"About"},{"location":"#demo","text":"","title":"Demo"},{"location":"#why-is-this-named-woke","text":"When I started writing woke in August 2020, my goal was to build a tool that would shed light on non-inclusive language in source code and that would enable a long-term commitment to using inclusive language. woke is a reference to an awareness of social and political issues, especially racial prejudice and discrimination, and has a historic use within the African-American community. This tool aims to push this kind of awareness even further into the software development community. I named this project woke because I saw it as a tool to awaken our code to non-inclusive language. You can read more about the origins and history of the word on Wikipedia .","title":"Why is this named woke?"},{"location":"#authors","text":"Caitlin Elfring - caitlinelfring See also the list of contributors who participated in this project.","title":"Authors"},{"location":"#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"#license","text":"This application is licensed under the MIT License, you may obtain a copy of it here .","title":"License"},{"location":"about/","text":"About \u00b6 Resources \u00b6 Below are some additional resources relating to why this project is important. https://buffer.com/resources/inclusive-language-tech/ https://medium.com/pm101/inclusive-language-guide-for-tech-companies-and-startups-f5b254d4a5b7 https://www.marketplace.org/2020/06/17/tech-companies-update-language-to-avoid-offensive-terms/ https://tools.ietf.org/html/draft-knodel-terminology-02 Who uses woke \u00b6 Are you using woke in your org? We'd love to know! Please send a PR and add your organization name/link to this list. Rent the Runway ( blog post ) Veue Cisco Orchard Canonical Airbnb ( blog post ) Authors \u00b6 Caitlin Elfring - caitlinelfring See also the list of contributors who participated in this project. Contributing \u00b6 Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. License \u00b6 This application is licensed under the MIT License, you may obtain a copy of it here . Versioning \u00b6 We use SemVer for versioning. For the versions available, see the tags on this repository . Acknowledgments \u00b6 The following projects provided inspiration for parts of woke https://github.com/get-alex/alex https://github.com/retextjs/retext-equality https://github.com/golangci/golangci-lint","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#resources","text":"Below are some additional resources relating to why this project is important. https://buffer.com/resources/inclusive-language-tech/ https://medium.com/pm101/inclusive-language-guide-for-tech-companies-and-startups-f5b254d4a5b7 https://www.marketplace.org/2020/06/17/tech-companies-update-language-to-avoid-offensive-terms/ https://tools.ietf.org/html/draft-knodel-terminology-02","title":"Resources"},{"location":"about/#who-uses-woke","text":"Are you using woke in your org? We'd love to know! Please send a PR and add your organization name/link to this list. Rent the Runway ( blog post ) Veue Cisco Orchard Canonical Airbnb ( blog post )","title":"Who uses woke"},{"location":"about/#authors","text":"Caitlin Elfring - caitlinelfring See also the list of contributors who participated in this project.","title":"Authors"},{"location":"about/#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"about/#license","text":"This application is licensed under the MIT License, you may obtain a copy of it here .","title":"License"},{"location":"about/#versioning","text":"We use SemVer for versioning. For the versions available, see the tags on this repository .","title":"Versioning"},{"location":"about/#acknowledgments","text":"The following projects provided inspiration for parts of woke https://github.com/get-alex/alex https://github.com/retextjs/retext-equality https://github.com/golangci/golangci-lint","title":"Acknowledgments"},{"location":"ignore/","text":"Ignoring \u00b6 Files \u00b6 You can ignore files by adding to your config file. All ways of ignoring files below should follow the gitignore convention. ignore_files : - other/files/in/repo - globs/too/* .git Woke will always ignore the .git directory so there's no need to include it in any of the ignore configurations. woke will also automatically ignore anything listed in .gitignore , .ignore , and .git/info/exclude . .wokeignore \u00b6 You may also specify a .wokeignore file at the root of the directory to add additional ignore files. This also follows the gitignore convention. See .wokeignore.example for a collection of common files and directories that may contain generated SHA and GUID s. Dependency directories are also shown in the example as the linter will parse dependency source code and possibly find errors. In-line and next-line ignoring \u00b6 There may be times where you don't want to ignore an entire file. You may ignore a specific line for one or more rules by creating an in-line or next-line comment. This functionality is very rudimentary, it does a simple search for the phrase. Since woke is just a text file analyzer, it has no concept of the comment syntax for every file type it might encounter. For in-line ignoring, simply add the following to the line you wish to ignore, using comment syntax that is supported for your file type. Danger woke is not responsible for broken code due to in-line ignoring. Make sure you comment correctly! Next-line ignoring works in a similar way. Instead of adding to the end of line you wish to ignore, you can create the ignore comment on its own line just before it. Any alphanumeric text to the left of the phrase will cause woke to treat it as an in-line ignore, but any text to the right of the phrase will not be considered. Note Next-line ignore comments takes precedence over in-line ignores, so try to only use one for any given line! This line has RULE_NAME but will be ignored # wokeignore:rule=RULE_NAME # wokeignore:rule=RULENAME Here is another line with RULE_NAME that will be ignored # a couple of examples ignoring the following line for the whitelist rule whitelist # wokeignore:rule=whitelist # wokeignore:rule=whitelist whitelist # a couple of examples doing the same for multiple rules # rule names must be comma-separated with no spaces whitelist and blacklist # wokeignore:rule=whitelist,blacklist # wokeignore:rule=whitelist,blacklist whitelist and blacklist # wokeignore:rule=whitelist text here won't be considered by woke even if it contains whitelist this line with whitelist will still be ignored Here's an example in go: func main () { fmt . Println ( \"here is the whitelist\" ) // wokeignore:rule=whitelist // wokeignore:rule=blacklist fmt . Println ( \"and here is the blacklist\" ) } Nested Ignore Files \u00b6 woke will apply ignore rules from nested ignore files to any child files/folders, similar to a nested .gitignore file. Nested ignore files work for any ignore file type listed above. project \u2502 README.md \u2502 .wokeignore (applies to whole project) \u2502 \u2514\u2500\u2500\u2500folder1 \u2502 \u2502 file011.txt \u2502 \u2502 file012.txt \u2502 \u2502 .wokeignore (applies to file011.txt, file012.txt, and subfolder1) \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500subfolder1 \u2502 \u2502 file111.txt \u2502 \u2502 file112.txt \u2502 \u2502 ... \u2502 \u2514\u2500\u2500\u2500folder2 \u2502 file021.txt \u2502 file022.txt","title":"Ignoring"},{"location":"ignore/#ignoring","text":"","title":"Ignoring"},{"location":"ignore/#files","text":"You can ignore files by adding to your config file. All ways of ignoring files below should follow the gitignore convention. ignore_files : - other/files/in/repo - globs/too/* .git Woke will always ignore the .git directory so there's no need to include it in any of the ignore configurations. woke will also automatically ignore anything listed in .gitignore , .ignore , and .git/info/exclude .","title":"Files"},{"location":"ignore/#wokeignore","text":"You may also specify a .wokeignore file at the root of the directory to add additional ignore files. This also follows the gitignore convention. See .wokeignore.example for a collection of common files and directories that may contain generated SHA and GUID s. Dependency directories are also shown in the example as the linter will parse dependency source code and possibly find errors.","title":".wokeignore"},{"location":"ignore/#in-line-and-next-line-ignoring","text":"There may be times where you don't want to ignore an entire file. You may ignore a specific line for one or more rules by creating an in-line or next-line comment. This functionality is very rudimentary, it does a simple search for the phrase. Since woke is just a text file analyzer, it has no concept of the comment syntax for every file type it might encounter. For in-line ignoring, simply add the following to the line you wish to ignore, using comment syntax that is supported for your file type. Danger woke is not responsible for broken code due to in-line ignoring. Make sure you comment correctly! Next-line ignoring works in a similar way. Instead of adding to the end of line you wish to ignore, you can create the ignore comment on its own line just before it. Any alphanumeric text to the left of the phrase will cause woke to treat it as an in-line ignore, but any text to the right of the phrase will not be considered. Note Next-line ignore comments takes precedence over in-line ignores, so try to only use one for any given line! This line has RULE_NAME but will be ignored # wokeignore:rule=RULE_NAME # wokeignore:rule=RULENAME Here is another line with RULE_NAME that will be ignored # a couple of examples ignoring the following line for the whitelist rule whitelist # wokeignore:rule=whitelist # wokeignore:rule=whitelist whitelist # a couple of examples doing the same for multiple rules # rule names must be comma-separated with no spaces whitelist and blacklist # wokeignore:rule=whitelist,blacklist # wokeignore:rule=whitelist,blacklist whitelist and blacklist # wokeignore:rule=whitelist text here won't be considered by woke even if it contains whitelist this line with whitelist will still be ignored Here's an example in go: func main () { fmt . Println ( \"here is the whitelist\" ) // wokeignore:rule=whitelist // wokeignore:rule=blacklist fmt . Println ( \"and here is the blacklist\" ) }","title":"In-line and next-line ignoring"},{"location":"ignore/#nested-ignore-files","text":"woke will apply ignore rules from nested ignore files to any child files/folders, similar to a nested .gitignore file. Nested ignore files work for any ignore file type listed above. project \u2502 README.md \u2502 .wokeignore (applies to whole project) \u2502 \u2514\u2500\u2500\u2500folder1 \u2502 \u2502 file011.txt \u2502 \u2502 file012.txt \u2502 \u2502 .wokeignore (applies to file011.txt, file012.txt, and subfolder1) \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500subfolder1 \u2502 \u2502 file111.txt \u2502 \u2502 file112.txt \u2502 \u2502 ... \u2502 \u2514\u2500\u2500\u2500folder2 \u2502 file021.txt \u2502 file022.txt","title":"Nested Ignore Files"},{"location":"installation/","text":"Installation \u00b6 Tip There are multiple ways to install woke . If you're interested in any installation methods that are not listed here, feel free to open an issue . Releases \u00b6 Download the latest binary from Releases macOS \u00b6 You can install a binary release on macOS using brew brew install get-woke/tap/woke brew upgrade get-woke/tap/woke Windows \u00b6 You can install woke with scoop scoop bucket add get-woke https://github.com/get-woke/scoop-bucket.git scoop install get-woke/woke Simple installation \u00b6 To install the latest version: curl -sSfL https://git.io/getwoke | \\ bash -s -- -b /usr/local/bin Or install a specific version (omit the minor or patch portion to install the latest major/minor version) curl -sSfL https://git.io/getwoke | \\ bash -s -- -b /usr/local/bin v0.9.0 Feel free to change the path from /usr/local/bin , just make sure woke is available on your $PATH (check with woke --version ). Build from source \u00b6 Install the go toolchain: https://golang.org/doc/install go install github.com/get-woke/woke@latest # Or pin a specific version go install github.com/get-woke/woke@v0.9.0 Docker \u00b6 You can run woke within docker. You will need to mount a volume that contains your source code and/or rules. ## Run with all defaults, within the mounted /src directory docker run -v $( pwd ) :/src -w /src getwoke/woke ## Provide rules config docker run -v $( pwd ) :/src -w /src getwoke/woke \\ woke -c my-rules.yaml CI \u00b6 GitHub Actions \u00b6 GitHub Action GitHub Action (reviewdog) Others \u00b6 Are there other CI systems that you're using to run woke ? Edit this page and add documentation/configurations for others.","title":"Installation"},{"location":"installation/#installation","text":"Tip There are multiple ways to install woke . If you're interested in any installation methods that are not listed here, feel free to open an issue .","title":"Installation"},{"location":"installation/#releases","text":"Download the latest binary from Releases","title":"Releases"},{"location":"installation/#macos","text":"You can install a binary release on macOS using brew brew install get-woke/tap/woke brew upgrade get-woke/tap/woke","title":"macOS"},{"location":"installation/#windows","text":"You can install woke with scoop scoop bucket add get-woke https://github.com/get-woke/scoop-bucket.git scoop install get-woke/woke","title":"Windows"},{"location":"installation/#simple-installation","text":"To install the latest version: curl -sSfL https://git.io/getwoke | \\ bash -s -- -b /usr/local/bin Or install a specific version (omit the minor or patch portion to install the latest major/minor version) curl -sSfL https://git.io/getwoke | \\ bash -s -- -b /usr/local/bin v0.9.0 Feel free to change the path from /usr/local/bin , just make sure woke is available on your $PATH (check with woke --version ).","title":"Simple installation"},{"location":"installation/#build-from-source","text":"Install the go toolchain: https://golang.org/doc/install go install github.com/get-woke/woke@latest # Or pin a specific version go install github.com/get-woke/woke@v0.9.0","title":"Build from source"},{"location":"installation/#docker","text":"You can run woke within docker. You will need to mount a volume that contains your source code and/or rules. ## Run with all defaults, within the mounted /src directory docker run -v $( pwd ) :/src -w /src getwoke/woke ## Provide rules config docker run -v $( pwd ) :/src -w /src getwoke/woke \\ woke -c my-rules.yaml","title":"Docker"},{"location":"installation/#ci","text":"","title":"CI"},{"location":"installation/#github-actions","text":"GitHub Action GitHub Action (reviewdog)","title":"GitHub Actions"},{"location":"installation/#others","text":"Are there other CI systems that you're using to run woke ? Edit this page and add documentation/configurations for others.","title":"Others"},{"location":"rules/","text":"Rules \u00b6 Schema \u00b6 The syntax for rules is very basic. You just need a name, a list of terms to match that violate the rule, and a list of alternative suggestions. rules : - name : whitelist terms : - whitelist - white-list alternatives : - allowlist note : An optional description why these terms are not inclusive. It can be optionally included in the output message. # options: # word_boundary: false # word_boundary_start: false # word_boundary_end: false # include_note: false # categories: nil A set of default rules is provided in pkg/rule/default.yaml . Tip If you copy these rules into your config file, be sure to put them under the rules: key. Options \u00b6 You can configure options for each rule. Add an options key to your rule definition to customize. word_boundary \u00b6 Default: false If true , terms will trigger findings when they are surrounded by ASCII word boundaries. If false , will trigger findings if the term if found anywhere in the line, regardless if it is within an ASCII word boundary. setting word_boundary to true will always win out over word_boundary_start and word_boundary_end word_boundary_start \u00b6 Default: false If true , terms will trigger findings when they begin with an ASCII word boundaries. If false , will trigger findings if the term if found anywhere in the line, regardless if it begins with an ASCII word boundary. word_boundary_end \u00b6 Default: false If true , terms will trigger findings when they end with an ASCII word boundaries. If false , will trigger findings if the term if found anywhere in the line, regardless if it ends with an ASCII word boundary. include_note \u00b6 Default: not set If true , the rule note will be included in the output message explaining why this finding is not inclusive If false , the rule note will not be included in the output message If not set , include_note in your woke config file (ie .woke.yml ) regulates if the note should be included in the output message (default: false ). categories \u00b6 Default: not set A list of any number of string category names to associate with the rule These can be used as logical groupings for actions such as excluding certain categories of rules for example Disabling Default Rules \u00b6 You can disable default rules by providing a rule in your woke config file (ie .woke.yml ), with no terms or alternatives. This will disable the default whitelist rule: rules : - name : whitelist Disable all Default Rules \u00b6 There may be a case where you want full control over the rules you want to run with woke. You can either disable each default rule via the instructions above. Or you can run woke with --disable-default-rules to completely disable all default rules. Note woke will fail to run if you use --disable-default-rules without providing your own rules because that would mean running woke without any rules, which is pointless. Excluding Categories of Rules \u00b6 You can also specify any number of rule categories to be excluded, or filtered out, from within your woke configuration. If any rules in a configuration file have matching categories, they will be excluded and will not be run against the target files. This example will exclude rule1 and rule2 , but will still use rule3 : exclude_categories : - category1 rules : - name : rule1 terms : - rule1 alternatives : - alt-rule1 severity : warning options : categories : - category1 - name : rule2 terms : - rule2 alternatives : - alt-rule2 severity : warning options : categories : - category1 - category2 - name : rule3 terms : - rule3 alternatives : - alt-rule3 severity : warning","title":"Rules"},{"location":"rules/#rules","text":"","title":"Rules"},{"location":"rules/#schema","text":"The syntax for rules is very basic. You just need a name, a list of terms to match that violate the rule, and a list of alternative suggestions. rules : - name : whitelist terms : - whitelist - white-list alternatives : - allowlist note : An optional description why these terms are not inclusive. It can be optionally included in the output message. # options: # word_boundary: false # word_boundary_start: false # word_boundary_end: false # include_note: false # categories: nil A set of default rules is provided in pkg/rule/default.yaml . Tip If you copy these rules into your config file, be sure to put them under the rules: key.","title":"Schema"},{"location":"rules/#options","text":"You can configure options for each rule. Add an options key to your rule definition to customize.","title":"Options"},{"location":"rules/#word_boundary","text":"Default: false If true , terms will trigger findings when they are surrounded by ASCII word boundaries. If false , will trigger findings if the term if found anywhere in the line, regardless if it is within an ASCII word boundary. setting word_boundary to true will always win out over word_boundary_start and word_boundary_end","title":"word_boundary"},{"location":"rules/#word_boundary_start","text":"Default: false If true , terms will trigger findings when they begin with an ASCII word boundaries. If false , will trigger findings if the term if found anywhere in the line, regardless if it begins with an ASCII word boundary.","title":"word_boundary_start"},{"location":"rules/#word_boundary_end","text":"Default: false If true , terms will trigger findings when they end with an ASCII word boundaries. If false , will trigger findings if the term if found anywhere in the line, regardless if it ends with an ASCII word boundary.","title":"word_boundary_end"},{"location":"rules/#include_note","text":"Default: not set If true , the rule note will be included in the output message explaining why this finding is not inclusive If false , the rule note will not be included in the output message If not set , include_note in your woke config file (ie .woke.yml ) regulates if the note should be included in the output message (default: false ).","title":"include_note"},{"location":"rules/#categories","text":"Default: not set A list of any number of string category names to associate with the rule These can be used as logical groupings for actions such as excluding certain categories of rules for example","title":"categories"},{"location":"rules/#disabling-default-rules","text":"You can disable default rules by providing a rule in your woke config file (ie .woke.yml ), with no terms or alternatives. This will disable the default whitelist rule: rules : - name : whitelist","title":"Disabling Default Rules"},{"location":"rules/#disable-all-default-rules","text":"There may be a case where you want full control over the rules you want to run with woke. You can either disable each default rule via the instructions above. Or you can run woke with --disable-default-rules to completely disable all default rules. Note woke will fail to run if you use --disable-default-rules without providing your own rules because that would mean running woke without any rules, which is pointless.","title":"Disable all Default Rules"},{"location":"rules/#excluding-categories-of-rules","text":"You can also specify any number of rule categories to be excluded, or filtered out, from within your woke configuration. If any rules in a configuration file have matching categories, they will be excluded and will not be run against the target files. This example will exclude rule1 and rule2 , but will still use rule3 : exclude_categories : - category1 rules : - name : rule1 terms : - rule1 alternatives : - alt-rule1 severity : warning options : categories : - category1 - name : rule2 terms : - rule2 alternatives : - alt-rule2 severity : warning options : categories : - category1 - category2 - name : rule3 terms : - rule3 alternatives : - alt-rule3 severity : warning","title":"Excluding Categories of Rules"},{"location":"tools/","text":"Tools \u00b6 GitHub Action GitHub Action (reviewdog) VS Code Extension VIM Plugin Pre-commit hook \u00b6 woke supports being run from a pre-commit hook, allowing you to avoid accidentally committing uses of non-inclusive language. You have two alternative mechanisms for doing so. If you have arranged to install woke on your command search path (as well as anyone working on your repository), then add this configuration to your .pre-commit-config.yaml : - repo : https://github.com/get-woke/woke rev : '' # pick a tag to point to hooks : - woke (Note that in this case the rev only controls the version of a wrapper script that is used, not the version of woke itself.) Alternatively, you can tell pre-commit to build woke from source, although this requires you and anyone working on your repository to have go on your command search path and for it to be at least version 1.17: - repo : https://github.com/get-woke/woke rev : '' # pick a tag to point to hooks : - woke-from-source (In this case the rev controls the version of woke itself.) See the pre-commit documentation for how to customize this further.","title":"Tools"},{"location":"tools/#tools","text":"GitHub Action GitHub Action (reviewdog) VS Code Extension VIM Plugin","title":"Tools"},{"location":"tools/#pre-commit-hook","text":"woke supports being run from a pre-commit hook, allowing you to avoid accidentally committing uses of non-inclusive language. You have two alternative mechanisms for doing so. If you have arranged to install woke on your command search path (as well as anyone working on your repository), then add this configuration to your .pre-commit-config.yaml : - repo : https://github.com/get-woke/woke rev : '' # pick a tag to point to hooks : - woke (Note that in this case the rev only controls the version of a wrapper script that is used, not the version of woke itself.) Alternatively, you can tell pre-commit to build woke from source, although this requires you and anyone working on your repository to have go on your command search path and for it to be at least version 1.17: - repo : https://github.com/get-woke/woke rev : '' # pick a tag to point to hooks : - woke-from-source (In this case the rev controls the version of woke itself.) See the pre-commit documentation for how to customize this further.","title":"Pre-commit hook"},{"location":"usage/","text":"Usage \u00b6 woke \u00b6 Check for usage of non-inclusive language in your code and provide alternatives Synopsis \u00b6 woke is a linter that will check your source code for usage of non-inclusive language and provide suggestions for alternatives. Rules can be customized to suit your needs. Provide a list file globs for files you'd like to check. woke [globs ...] [flags] Options \u00b6 -c, --config string Config file (default is .woke.yaml in current directory, or $HOME) --debug Enable debug logging --disable-default-rules Disable the default ruleset --exit-1-on-failure Exit with exit code 1 on failures -h, --help help for woke --no-ignore Ignored files in .gitignore, .ignore, .wokeignore, .git/info/exclude, and inline ignores are processed -o, --output string Output type [text,simple,github-actions,json,sonarqube] (default \"text\") --stdin Read from stdin Auto generated by spf13/cobra on 18-Mar-2022 \u00b6 Config file \u00b6 Configure your custom rules config in .woke.yaml or .woke.yml . woke uses the following precedence order. Each item takes precedence over the item below it: current working directory $HOME This file will be picked up automatically up your customizations without needing to supply it with the -c flag. See example.yaml for an example of adding custom rules. You can also supply your own rules with -c path/to/rules.yaml if you want to handle different rulesets. Remote config file \u00b6 You can also use a remote config file by providing a publicly-accessible URL. $ woke -c https://raw.githubusercontent.com/get-woke/woke/main/example.yaml No findings found. Inputs \u00b6 File globs \u00b6 By default, woke will run against all text files in your current directory. To change this, supply a space-separated list of globs as the first argument. This can be something like **/*.go , or a space-separated list of filenames. $ woke test.txt test.txt:2:2-11: ` Blacklist ` may be insensitive, use ` denylist ` , ` blocklist ` instead ( warning ) * Blacklist ^ test.txt:3:2-12: ` White-list ` may be insensitive, use ` allowlist ` instead ( warning ) * White-list ^ test.txt:4:2-11: ` whitelist ` may be insensitive, use ` allowlist ` instead ( warning ) * whitelist ^ test.txt:5:2-11: ` blacklist ` may be insensitive, use ` denylist ` , ` blocklist ` instead ( warning ) * blacklist ^ STDIN \u00b6 You can also provide text to woke via STDIN (Standard Input) $ echo \"This has whitelist from stdin\" | woke --stdin /dev/stdin:1:9-18: ` whitelist ` may be insensitive, use ` allowlist ` instead ( warning ) This has whitelist from stdin ^ This option may not be used at the same time as File Globs Outputs \u00b6 Options for output include text (default), simple, json, github-actions, or sonarqube format. The following fields are supported, depending on format: Field Description filepath Relative path to file including filename rulename Name of the rule from the config file termname Specific term that was found in the text alternative List of alternative terms to use instead note Note about reasoning for inclusion severity From config, one of \"error\", \"warning\", or \"info\" optionbool Option value, true or false linecontents Contents of the line with finding lineno Line number, 1 based startcol Starting column number, 0 based endcol Ending column number, 0 based description Description of finding Output is sent to STDOUT (Standard Output), which may be redirected to a file to save the results of a scan. Text \u00b6 woke -o text text is the default output format for woke. Displays each result on two lines. Includes color formatting if the terminal supports it. Structure \u00b6 <filepath>:<lineno>:<startcol>-<endcol>: <description> (<severity>) <linecontents> Simple \u00b6 woke -o simple simple is a format similar to text, but without color support and with each result on a single line. Structure \u00b6 <filepath>:<lineno>:<startcol>: <description> GitHub Actions \u00b6 woke -o github-actions The github-actions output type is intended for integration with GitHub Actions . See woke-action for more information on integration. Structure \u00b6 ::<severity> file=<filepath>,line=<lineno>,col=<startcol>::<description> JSON \u00b6 woke -o json Outputs the results as a series of json formatted structures, one per line. In order to parse as a JSON document, each line must be processed separately. This output type includes every field available in woke. Structure \u00b6 Info Actual output from woke will be consolidated JSON. Pretty-JSON here is just for readability. { \"Filename\" : \"<filepath>\" , \"Results\" : [ { \"Rule\" : { \"Name\" : \"<rulename>\" , \"Terms\" : [ \"<termname>\" , ... ], \"Alternatives\" : [ \"<alternative>\" , ... ], \"Note\" : \"<note>\" , \"Severity\" : \"<severity>\" , \"Options\" : { \"WordBoundary\" : <op t io n bool> , \"WordBoundaryStart\" : <op t io n bool> , \"WordBoundaryEnd\" : <op t io n bool> , \"IncludeNote\" : <op t io n bool> } }, \"Finding\" : \"<termname>\" , \"Line\" : \"<linecontents>\" , \"StartPosition\" : { \"Filename\" : \"<filepath>\" , \"Offset\" : 0 , \"Line\" : <li nen o> , \"Column\" : <s tart col> }, \"EndPosition\" : { \"Filename\" : \"<filepath>\" , \"Offset\" : 0 , \"Line\" : <li nen o> , \"Column\" : <e n dcol> }, \"Reason\" : \"<description>\" } ] } SonarQube \u00b6 woke -o sonarqube Format used to populate results into the popular SonarQube code quality tool. Note: woke is not executed as part of SonarQube itself, so must be run and the results file output prior to execution. Typically woke would be executed with an automation server such as Jenkins, Travis CI or Github Actions prior to creating the SonarQube report. For details on the file format, see Generic Issue Input Format . The Analysis Parameter sonar.externalIssuesReportPaths is used to point to the path to the report file generated by woke . Structure \u00b6 Info Actual output from woke will be consolidated JSON. Pretty-JSON here is just for readability. { \"issues\" : [ { \"engineId\" : \"woke\" , \"ruleId\" : \"<rulename>\" , \"primaryLocation\" : { \"message\" : \"<description>\" , \"filePath\" : \"<filepath>\" , \"textRange\" : { \"startLine\" : <li nen o> , \"startColumn\" : <s tart col> , \"endColumn\" : <e n dcol> } }, \"type\" : \"CODE_SMELL\" , \"severity\" : \"<sonarqubeseverity>\" } ] } Note <sonarqubeseverity> is mapped from severity, such that an error in woke is translated to a MAJOR , warning to a MINOR , and info to INFO Exit Code \u00b6 By default, woke will exit with a successful exit code when there are any rule failures. The idea is, if you run woke on PRs, you may not want to block a merge, but you do want to inform the author that they can make better word choices. If you're using woke on PRs, you can choose to enforce these rules with a non-zero exit code by running woke --exit-1-on-failure . Parallelism \u00b6 Advanced Configuration It's unlikely that you will need to adjust parallelism. But in case you do, if you are running woke with limited resources, and/or against a very large directory, you may want to restrict the number of threads that woke uses. By default, woke will parse files in parallel and will consume as many resources as it can, unbounded. This means woke will be fast, but might run out of memory, depending on how large the files/lines are. We can limit these allocations by bounding the number of files read in parallel. To accomplish this, set the environment variable WORKER_POOL_COUNT to an integer value of the fixed number of goroutines you would like to spawn for reading files. Read more about go's concurrency patterns here .","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#woke","text":"Check for usage of non-inclusive language in your code and provide alternatives","title":"woke"},{"location":"usage/#synopsis","text":"woke is a linter that will check your source code for usage of non-inclusive language and provide suggestions for alternatives. Rules can be customized to suit your needs. Provide a list file globs for files you'd like to check. woke [globs ...] [flags]","title":"Synopsis"},{"location":"usage/#options","text":"-c, --config string Config file (default is .woke.yaml in current directory, or $HOME) --debug Enable debug logging --disable-default-rules Disable the default ruleset --exit-1-on-failure Exit with exit code 1 on failures -h, --help help for woke --no-ignore Ignored files in .gitignore, .ignore, .wokeignore, .git/info/exclude, and inline ignores are processed -o, --output string Output type [text,simple,github-actions,json,sonarqube] (default \"text\") --stdin Read from stdin","title":"Options"},{"location":"usage/#config-file","text":"Configure your custom rules config in .woke.yaml or .woke.yml . woke uses the following precedence order. Each item takes precedence over the item below it: current working directory $HOME This file will be picked up automatically up your customizations without needing to supply it with the -c flag. See example.yaml for an example of adding custom rules. You can also supply your own rules with -c path/to/rules.yaml if you want to handle different rulesets.","title":"Config file"},{"location":"usage/#remote-config-file","text":"You can also use a remote config file by providing a publicly-accessible URL. $ woke -c https://raw.githubusercontent.com/get-woke/woke/main/example.yaml No findings found.","title":"Remote config file"},{"location":"usage/#inputs","text":"","title":"Inputs"},{"location":"usage/#file-globs","text":"By default, woke will run against all text files in your current directory. To change this, supply a space-separated list of globs as the first argument. This can be something like **/*.go , or a space-separated list of filenames. $ woke test.txt test.txt:2:2-11: ` Blacklist ` may be insensitive, use ` denylist ` , ` blocklist ` instead ( warning ) * Blacklist ^ test.txt:3:2-12: ` White-list ` may be insensitive, use ` allowlist ` instead ( warning ) * White-list ^ test.txt:4:2-11: ` whitelist ` may be insensitive, use ` allowlist ` instead ( warning ) * whitelist ^ test.txt:5:2-11: ` blacklist ` may be insensitive, use ` denylist ` , ` blocklist ` instead ( warning ) * blacklist ^","title":"File globs"},{"location":"usage/#stdin","text":"You can also provide text to woke via STDIN (Standard Input) $ echo \"This has whitelist from stdin\" | woke --stdin /dev/stdin:1:9-18: ` whitelist ` may be insensitive, use ` allowlist ` instead ( warning ) This has whitelist from stdin ^ This option may not be used at the same time as File Globs","title":"STDIN"},{"location":"usage/#outputs","text":"Options for output include text (default), simple, json, github-actions, or sonarqube format. The following fields are supported, depending on format: Field Description filepath Relative path to file including filename rulename Name of the rule from the config file termname Specific term that was found in the text alternative List of alternative terms to use instead note Note about reasoning for inclusion severity From config, one of \"error\", \"warning\", or \"info\" optionbool Option value, true or false linecontents Contents of the line with finding lineno Line number, 1 based startcol Starting column number, 0 based endcol Ending column number, 0 based description Description of finding Output is sent to STDOUT (Standard Output), which may be redirected to a file to save the results of a scan.","title":"Outputs"},{"location":"usage/#text","text":"woke -o text text is the default output format for woke. Displays each result on two lines. Includes color formatting if the terminal supports it.","title":"Text"},{"location":"usage/#simple","text":"woke -o simple simple is a format similar to text, but without color support and with each result on a single line.","title":"Simple"},{"location":"usage/#github-actions","text":"woke -o github-actions The github-actions output type is intended for integration with GitHub Actions . See woke-action for more information on integration.","title":"GitHub Actions"},{"location":"usage/#json","text":"woke -o json Outputs the results as a series of json formatted structures, one per line. In order to parse as a JSON document, each line must be processed separately. This output type includes every field available in woke.","title":"JSON"},{"location":"usage/#sonarqube","text":"woke -o sonarqube Format used to populate results into the popular SonarQube code quality tool. Note: woke is not executed as part of SonarQube itself, so must be run and the results file output prior to execution. Typically woke would be executed with an automation server such as Jenkins, Travis CI or Github Actions prior to creating the SonarQube report. For details on the file format, see Generic Issue Input Format . The Analysis Parameter sonar.externalIssuesReportPaths is used to point to the path to the report file generated by woke .","title":"SonarQube"},{"location":"usage/#exit-code","text":"By default, woke will exit with a successful exit code when there are any rule failures. The idea is, if you run woke on PRs, you may not want to block a merge, but you do want to inform the author that they can make better word choices. If you're using woke on PRs, you can choose to enforce these rules with a non-zero exit code by running woke --exit-1-on-failure .","title":"Exit Code"},{"location":"usage/#parallelism","text":"Advanced Configuration It's unlikely that you will need to adjust parallelism. But in case you do, if you are running woke with limited resources, and/or against a very large directory, you may want to restrict the number of threads that woke uses. By default, woke will parse files in parallel and will consume as many resources as it can, unbounded. This means woke will be fast, but might run out of memory, depending on how large the files/lines are. We can limit these allocations by bounding the number of files read in parallel. To accomplish this, set the environment variable WORKER_POOL_COUNT to an integer value of the fixed number of goroutines you would like to spawn for reading files. Read more about go's concurrency patterns here .","title":"Parallelism"},{"location":"snippets/about/","text":"Authors \u00b6 Caitlin Elfring - caitlinelfring See also the list of contributors who participated in this project. Contributing \u00b6 Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. License \u00b6 This application is licensed under the MIT License, you may obtain a copy of it here .","title":"About"},{"location":"snippets/about/#authors","text":"Caitlin Elfring - caitlinelfring See also the list of contributors who participated in this project.","title":"Authors"},{"location":"snippets/about/#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"snippets/about/#license","text":"This application is licensed under the MIT License, you may obtain a copy of it here .","title":"License"},{"location":"snippets/woke/","text":"woke \u00b6 Check for usage of non-inclusive language in your code and provide alternatives Synopsis \u00b6 woke is a linter that will check your source code for usage of non-inclusive language and provide suggestions for alternatives. Rules can be customized to suit your needs. Provide a list file globs for files you'd like to check. woke [globs ...] [flags] Options \u00b6 -c, --config string Config file (default is .woke.yaml in current directory, or $HOME) --debug Enable debug logging --disable-default-rules Disable the default ruleset --exit-1-on-failure Exit with exit code 1 on failures -h, --help help for woke --no-ignore Ignored files in .gitignore, .ignore, .wokeignore, .git/info/exclude, and inline ignores are processed -o, --output string Output type [text,simple,github-actions,json,sonarqube] (default \"text\") --stdin Read from stdin Auto generated by spf13/cobra on 18-Mar-2022 \u00b6","title":"Woke"},{"location":"snippets/woke/#woke","text":"Check for usage of non-inclusive language in your code and provide alternatives","title":"woke"},{"location":"snippets/woke/#synopsis","text":"woke is a linter that will check your source code for usage of non-inclusive language and provide suggestions for alternatives. Rules can be customized to suit your needs. Provide a list file globs for files you'd like to check. woke [globs ...] [flags]","title":"Synopsis"},{"location":"snippets/woke/#options","text":"-c, --config string Config file (default is .woke.yaml in current directory, or $HOME) --debug Enable debug logging --disable-default-rules Disable the default ruleset --exit-1-on-failure Exit with exit code 1 on failures -h, --help help for woke --no-ignore Ignored files in .gitignore, .ignore, .wokeignore, .git/info/exclude, and inline ignores are processed -o, --output string Output type [text,simple,github-actions,json,sonarqube] (default \"text\") --stdin Read from stdin","title":"Options"}]}